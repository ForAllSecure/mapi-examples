/*
 * Copyright 2021 ForAllSecure, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.forallsecure.mayhem4api;

import com.google.protobuf.ByteString;
import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.stub.StreamObserver;
import mapi.rewrite.RewritePluginGrpc.RewritePluginImplBase;
import mapi.rewrite.RequestRewritePlugin.Request;
import mapi.rewrite.RequestRewritePlugin.Request.Header;

import java.io.IOException;
import java.util.Optional;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;

/**
 *  This is our implementation of the proto servicer. It is responsible for listening for new
 *  requests generated by the mapi CLI and updating the request as needed.
 *
 *  In this example, we will send an alternative header every 5th request.
 */
public final class MapiPluginServer extends RewritePluginImplBase {
    // When mapi is run with concurrency > 1, the server will be called concurrently as well.
    // Track requests atomically.
    private final AtomicInteger request_count = new AtomicInteger(0);

    public static void main(String[] args) throws IOException, InterruptedException {
        new MapiPluginServer().start();
    }

    private void start() throws IOException, InterruptedException {
        final int port = Integer.parseInt(Optional.ofNullable(System.getenv("MAPI_PLUGIN_PORT")).orElse("9001"));
        final Server server = ServerBuilder.forPort(port)
                .addService(this)
                .executor(Executors.newFixedThreadPool(10))
                .build();
        server.start();

        // Inform mapi of the port we're listening on
        System.out.println(port);
        System.out.flush();

        server.awaitTermination();
    }

    @Override
    public void rewrite(Request request, StreamObserver<Request> responseObserver) {
        final int count = request_count.addAndGet(1);

        // Append a custom 'Authorization' header to the request
        final Header.Builder builder = Header.newBuilder();
        builder.setName(ByteString.copyFromUtf8("Authorization"));

        /// Send the 'foo' authorization token every fifth call...
        if (count % 5 == 0) {
            builder.setValue(ByteString.copyFromUtf8("Bearer foo"));
        }
        //...otherwise send 'bar'
        else {
            builder.setValue(ByteString.copyFromUtf8("Bearer bar"));
        }

        // Request cannot be modified directly. Build a new one, using the
        // request passed in as the prototype and add our new header.
        final Request modified_request = Request.newBuilder(request)
                .addHeaders(builder.build())
                .build();
        responseObserver.onNext(modified_request);
        responseObserver.onCompleted();
    }

}
