#!/usr/bin/env python

import sys
import os
import itertools
from concurrent import futures

import grpc

sys.path.append("generated")
from request_rewrite_plugin_pb2 import Request
from request_rewrite_plugin_pb2_grpc import RewritePluginServicer, add_RewritePluginServicer_to_server


class CustomRewritePluginServicer(RewritePluginServicer):
    def __init__(self):
        """
        When mapi is run with concurrency > 1, the server will be called concurrently as well.
        Using itertools.count() allows us to track requests count atomically.
        """
        self.request_count = itertools.count()

    def Rewrite(self, request, context):
        """
        This is our implementation of the proto servicer. It is responsible for listening for new
        requests generated by the mapi CLI and updating the request as needed.

        In this example, we will send an alternative header every 5th request.
        """
        count = next(self.request_count)

        # Append a custom authorization header to the request
        # Send the 'foo' authorization token every fifth call...
        if count % 5 == 0:
            request.headers.append(Request.Header(name=b"Authorization", value=b"Bearer foo"))
        # ...otherwise send 'bar'
        else:
            request.headers.append(Request.Header(name=b"Authorization", value=b"Bearer bar"))

        # Return the request with the new header
        return request


def get_port():
    """
    The server can run on a manually specified port, using the `MAPI_PLUGIN_PORT` environment
    variable. If the variable is not set, then the server will start on a port randomly assigned
    by the OS.
    """
    return os.getenv('MAPI_PLUGIN_PORT') or 0


if __name__ == '__main__':
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    add_RewritePluginServicer_to_server(CustomRewritePluginServicer(), server)

    # Bind to a port. Use the returned value to account for a randomly assigned
    # port.
    port = server.add_insecure_port(f'0.0.0.0:{get_port()}')

    # Start the server
    server.start()

    # inform mapi of the port we're listening on
    print(port)
    sys.stdout.flush()

    server.wait_for_termination()
